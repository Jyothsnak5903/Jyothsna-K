# Example of a simple Python program
print("Hello, world!")

# Variables
x = 10
name = "Alice"

# Receiving Input
age = input("Enter your age: ")
print("Your age is:", age)

# If Statements
if x > 5:
    print("x is greater than 5")
else:
    print("x is not greater than 5")

# Logical Operators
if x > 5 and name == "Alice":
    print("Both conditions are true")
elif x < 5 or name == "Bob":
    print("At least one condition is true")

# Functions
def greet(name):
    print("Hello,", name)

# Calling the function
greet("Alice")
# Lists and List Methods
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(numbers)
# Classes and Constructors
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Inheritance
class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
# Formatted Strings
name = "Alice"
age = 30
print(f"Hello, my name is {name} and I am {age} years old.")

# String Methods
message = "Hello, world!"
print(message.upper())  # Output: HELLO, WORLD!
print(message.lower())  # Output: hello, world!
# Arithmetic Operations
x = 10
y = 5
print(x + y)  # Addition
print(x - y)  # Subtraction
print(x * y)  # Multiplication
print(x / y)  # Division

# Operator Precedence
result = 10 + 5 * 2  # Multiplication is performed first
print(result)  # Output: 20

# Math Functions
import math
print(math.sqrt(16))  # Square root
print(math.pow(2, 3))  # Exponentiation
# While Loops
counter = 0
while counter < 5:
    print(counter)
    counter += 1

# Building a Guessing Game
secret_number = 7
guess = None
while guess != secret_number:
    guess = int(input("Guess the secret number (between 1 and 10): "))
print("Congratulations! You guessed the correct number.")
# For Loops
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

# Nested Loops
for i in range(3):
    for j in range(3):
        print(i, j)
# Lists
fruits = ["apple", "banana", "cherry"]
print(fruits[0])  # Output: apple

# 2D Lists
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix[1][1])  # Output: 5

# List Methods
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(numbers)
# Tuples
point = (10, 20)
x, y = point  # Unpacking tuple
print(f"x = {x}, y = {y}")

# Unpacking Dictionaries
person = {"name": "Alice", "age": 30}
name, age = person.values()
print(f"Name: {name}, Age: {age}")
def emoji_converter(message):
    emojis = {
        ":)": "ðŸ˜Š",
        ":(": "ðŸ˜ž"
    }
    for key, value in emojis.items():
        message = message.replace(key, value)
    return message

message = "Hello, :)"
print(emoji_converter(message))  # Output: Hello, ðŸ˜Š

# Return Statement
def square(x):
    return x * x

result = square(5)
print(result)  # Output: 25

# Creating a Reusable Function
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))  # Output: Hello, Alice!
print(greet("Bob"))  # Output: Hello, Bob!
# Exceptions
try:
    age = int(input("Enter your age: "))
except ValueError:
    print("Invalid input. Please enter a valid number.")

# Comments
# This is a single-line comment
'''
This is a
multi-line comment
'''
# Classes and Constructors
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

# Inheritance
class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def study(self):
        return f"{self.name} is studying."

# Creating objects and using classes
person1 = Person("Alice", 30)
print(person1.greet())  # Output: Hello, my name is Alice and I am 30 years old.

student1 = Student("Bob", 25, "S123")
print(student1.greet())  # Output: Hello, my name is Bob and I am 25 years old.
print(student1.study())  # Output: Bob is studying.

# Modules and Packages
import math
print(math.sqrt(16))  # Output: 4.0

# Generating Random Values
import random
print(random.randint(1, 10))  # Output: Random integer between 1 and 10
# Working with Directories
import os

# Get current working directory
print(os.getcwd())

# List files and directories in a directory
print(os.listdir())
# Installing a package using pip
# pip install package_name

# Using a package installed from PyPI
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run()


#Car Game:
command = ""
started = False

while True:
    command = input("> ").lower()
    if command == "start":
        if started:
            print("Car is already started!")
        else:
            started = True
            print("Car started... Ready to go!")
    elif command == "stop":
        if not started:
            print("Car is already stopped!")
        else:
            started = False
            print("Car stopped.")
    elif command == "quit":
        break
    elif command == "help":
        print("""
start - to start the car
stop - to stop the car
quit - to exit
        """)
    else:
        print("Sorry, I don't understand that command. Type 'help' for assistance.")


#Weight Converter Program
def kg_to_pounds(weight_kg):
    return weight_kg * 2.20462

def pounds_to_kg(weight_lbs):
    return weight_lbs / 2.20462

print("1. Kilograms to Pounds")
print("2. Pounds to Kilograms")
choice = int(input("Enter your choice (1 or 2): "))

if choice == 1:
    weight_kg = float(input("Enter weight in kilograms: "))
    print("Weight in pounds:", kg_to_pounds(weight_kg))
elif choice == 2:
    weight_lbs = float(input("Enter weight in pounds: "))
    print("Weight in kilograms:", pounds_to_kg(weight_lbs))
else:
    print("Invalid choice")


#Automation with Python for Excel Sheets
#You can use the openpyxl library to work with Excel files in Python for automation
#Remember to install the openpyxl library if you haven't already (pip install openpyxl)

import openpyxl

# Load the workbook
workbook = openpyxl.load_workbook('example.xlsx')

# Select the active worksheet
worksheet = workbook.active

# Read data from a specific cell
cell_value = worksheet['A1'].value
print("Value in A1:", cell_value)

# Write data to a specific cell
worksheet['B1'] = "Hello, World!"

# Save the workbook
workbook.save('example.xlsx')
